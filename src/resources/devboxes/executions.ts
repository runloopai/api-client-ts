// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';
import * as ExecutionsAPI from './executions';

export class Executions extends APIResource {
  /**
   * Get status of an execution on a devbox.
   */
  retrieve(
    id: string,
    exeId: string,
    body?: ExecutionRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxAsyncExecutionDetailView>;
  retrieve(
    id: string,
    exeId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxAsyncExecutionDetailView>;
  retrieve(
    id: string,
    exeId: string,
    body: ExecutionRetrieveParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxAsyncExecutionDetailView> {
    if (isRequestOptions(body)) {
      return this.retrieve(id, exeId, {}, body);
    }
    return this._client.post(`/v1/devboxes/${id}/executions/${exeId}`, { body, ...options });
  }

  /**
   * Asynchronously execute a command on a devbox
   */
  executeAsync(
    id: string,
    body?: ExecutionExecuteAsyncParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxAsyncExecutionDetailView>;
  executeAsync(id: string, options?: Core.RequestOptions): Core.APIPromise<DevboxAsyncExecutionDetailView>;
  executeAsync(
    id: string,
    body: ExecutionExecuteAsyncParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxAsyncExecutionDetailView> {
    if (isRequestOptions(body)) {
      return this.executeAsync(id, {}, body);
    }
    return this._client.post(`/v1/devboxes/${id}/executions/execute_async`, { body, ...options });
  }

  /**
   * Synchronously execute a command on a devbox
   */
  executeSync(
    id: string,
    body?: ExecutionExecuteSyncParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxExecutionDetailView>;
  executeSync(id: string, options?: Core.RequestOptions): Core.APIPromise<DevboxExecutionDetailView>;
  executeSync(
    id: string,
    body: ExecutionExecuteSyncParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxExecutionDetailView> {
    if (isRequestOptions(body)) {
      return this.executeSync(id, {}, body);
    }
    return this._client.post(`/v1/devboxes/${id}/execute_sync`, { body, ...options });
  }

  /**
   * Kill an asynchronous execution currently running on a devbox
   */
  kill(
    id: string,
    exeId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<DevboxAsyncExecutionDetailView> {
    return this._client.post(`/v1/devboxes/${id}/executions/${exeId}/kill`, options);
  }

  /**
   * Get all logs from a Devbox execution by id.
   */
  logs(id: string, executionId: string, options?: Core.RequestOptions): Core.APIPromise<DevboxLogsListView> {
    return this._client.get(`/v1/devboxes/${id}/executions/${executionId}/logs`, options);
  }

  /**
   * Tail the logs for the given devbox async execution. This will return past log
   * entries and continue from there. This is a streaming api and will continue to
   * stream logs until the connection is closed.
   */
  tail(id: string, executionId: string, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get(`/v1/devboxes/${id}/executions/${executionId}/logs/tail`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export interface DevboxAsyncExecutionDetailView {
  /**
   * Devbox id where command was executed.
   */
  devbox_id?: string;

  /**
   * Ephemeral id of the execution in progress.
   */
  execution_id?: string;

  /**
   * Exit code of command execution. This field will remain unset until the execution
   * has completed.
   */
  exit_status?: number;

  /**
   * Current status of the execution.
   */
  status?: 'running' | 'success' | 'failure' | 'canceled';

  /**
   * Standard error generated by command. This field will remain unset until the
   * execution has completed.
   */
  stderr?: string;

  /**
   * Standard out generated by command. This field will remain unset until the
   * execution has completed.
   */
  stdout?: string;
}

export interface DevboxExecutionDetailView {
  /**
   * Devbox id where command was executed.
   */
  devbox_id?: string;

  /**
   * Exit status of command execution.
   */
  exit_status?: number;

  /**
   * Standard error generated by command.
   */
  stderr?: string;

  /**
   * Standard out generated by command.
   */
  stdout?: string;
}

export interface DevboxLogsListView {
  /**
   * List of logs for the given devbox.
   */
  logs?: Array<DevboxLogsListView.Log>;
}

export namespace DevboxLogsListView {
  export interface Log {
    /**
     * The Command Executed
     */
    cmd?: string;

    /**
     * Identifier of the associated command the log is sourced from.
     */
    cmd_id?: string;

    /**
     * The Exit Code of the command
     */
    exit_code?: number;

    /**
     * Log line severity level.
     */
    level?: string;

    /**
     * Log line message.
     */
    message?: string;

    /**
     * The source of the log.
     */
    source?: 'setup_commands' | 'entrypoint' | 'exec';

    /**
     * Time of log (Unix timestamp milliseconds).
     */
    timestamp_ms?: number;
  }
}

export interface ExecutionRetrieveParams {
  /**
   * The command to execute on the Devbox.
   */
  command?: string;
}

export interface ExecutionExecuteAsyncParams {
  /**
   * The command to execute on the Devbox.
   */
  command?: string;
}

export interface ExecutionExecuteSyncParams {
  /**
   * The command to execute on the Devbox.
   */
  command?: string;
}

export namespace Executions {
  export import DevboxAsyncExecutionDetailView = ExecutionsAPI.DevboxAsyncExecutionDetailView;
  export import DevboxExecutionDetailView = ExecutionsAPI.DevboxExecutionDetailView;
  export import DevboxLogsListView = ExecutionsAPI.DevboxLogsListView;
  export import ExecutionRetrieveParams = ExecutionsAPI.ExecutionRetrieveParams;
  export import ExecutionExecuteAsyncParams = ExecutionsAPI.ExecutionExecuteAsyncParams;
  export import ExecutionExecuteSyncParams = ExecutionsAPI.ExecutionExecuteSyncParams;
}
