// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@runloop/api-client-mcp/filtering';
import { Metadata, asTextContentResult } from '@runloop/api-client-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Runloop from '@runloop/api-client';

export const metadata: Metadata = {
  resource: 'devboxes.browsers',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v1/devboxes/browsers/{id}',
  operationId: 'getBrowser',
};

export const tool: Tool = {
  name: 'retrieve_devboxes_browsers',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nGet Browser Details.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/browser_view',\n  $defs: {\n    browser_view: {\n      type: 'object',\n      description: 'A Browser represents a managed implementation of a browser like Chromiumon top of Devboxes. It includes the tunnel to the live screen and the underlying DevboxView.',\n      properties: {\n        connection_url: {\n          type: 'string',\n          description: 'The url to enable remote connection from browser automation tools like playwright.'\n        },\n        devbox: {\n          $ref: '#/$defs/devbox_view'\n        },\n        live_view_url: {\n          type: 'string',\n          description: 'The url to view the browser window and enable user interactions via their own browser. You can control the interactivity of the browser by adding or removing \\'view_only\\' query parameter. view_only=1 will allow interaction and view_only=0 will disable interaction.'\n        }\n      },\n      required: [        'connection_url',\n        'devbox',\n        'live_view_url'\n      ]\n    },\n    devbox_view: {\n      type: 'object',\n      description: 'A Devbox represents a virtual development environment. It is an isolated sandbox that can be given to agents and used to run arbitrary code such as AI generated code.',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The ID of the Devbox.'\n        },\n        capabilities: {\n          type: 'array',\n          description: 'A list of capability groups this devbox has access to. This allows devboxes to be compatible with certain tools sets like computer usage APIs.',\n          items: {\n            type: 'string',\n            enum: [              'unknown',\n              'computer_usage',\n              'browser_usage',\n              'language_server',\n              'docker_in_docker'\n            ]\n          }\n        },\n        create_time_ms: {\n          type: 'integer',\n          description: 'Creation time of the Devbox (Unix timestamp milliseconds).'\n        },\n        launch_parameters: {\n          $ref: '#/$defs/launch_parameters'\n        },\n        metadata: {\n          type: 'object',\n          description: 'The user defined Devbox metadata.',\n          additionalProperties: true\n        },\n        state_transitions: {\n          type: 'array',\n          description: 'A list of state transitions in order with durations',\n          items: {\n            type: 'object',\n            properties: {\n              status: {\n                type: 'string',\n                description: 'The status of the Devbox.\\n\\nprovisioning: Runloop is allocating and booting the necessary infrastructure resources.\\ninitializing: Runloop defined boot scripts are running to enable the environment for interaction.\\nrunning: The Devbox is ready for interaction.\\nsuspending: The Devbox disk is being snaphsotted and as part of suspension.\\nsuspended: The Devbox disk is saved and no more active compute is being used for the Devbox.\\nresuming: The Devbox disk is being loaded as part of booting a suspended Devbox.\\nfailure: The Devbox failed as part of booting or running user requested actions.\\nshutdown: The Devbox was successfully shutdown and no more active compute is being used.',\n                enum: [                  'provisioning',\n                  'initializing',\n                  'running',\n                  'suspending',\n                  'suspended',\n                  'resuming',\n                  'failure',\n                  'shutdown'\n                ]\n              },\n              transition_time_ms: {\n                type: 'object',\n                additionalProperties: true\n              }\n            }\n          }\n        },\n        status: {\n          type: 'string',\n          description: 'The current status of the Devbox.',\n          enum: [            'provisioning',\n            'initializing',\n            'running',\n            'suspending',\n            'suspended',\n            'resuming',\n            'failure',\n            'shutdown'\n          ]\n        },\n        blueprint_id: {\n          type: 'string',\n          description: 'The Blueprint ID used in creation of the Devbox, if the devbox was created from a Blueprint.'\n        },\n        end_time_ms: {\n          type: 'integer',\n          description: 'The time the Devbox finished execution (Unix timestamp milliseconds). Present if the Devbox is in a terminal state.'\n        },\n        failure_reason: {\n          type: 'string',\n          description: 'The failure reason if the Devbox failed, if the Devbox has a \\'failure\\' status.',\n          enum: [            'out_of_memory',\n            'out_of_disk',\n            'execution_failed'\n          ]\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the Devbox.'\n        },\n        shutdown_reason: {\n          type: 'string',\n          description: 'The shutdown reason if the Devbox shutdown, if the Devbox has a \\'shutdown\\' status.',\n          enum: [            'api_shutdown',\n            'keep_alive_timeout',\n            'entrypoint_exit',\n            'idle'\n          ]\n        },\n        snapshot_id: {\n          type: 'string',\n          description: 'The Snapshot ID used in creation of the Devbox, if the devbox was created from a Snapshot.'\n        }\n      },\n      required: [        'id',\n        'capabilities',\n        'create_time_ms',\n        'launch_parameters',\n        'metadata',\n        'state_transitions',\n        'status'\n      ]\n    },\n    launch_parameters: {\n      type: 'object',\n      description: 'LaunchParameters enable you to customize the resources available to your Devbox as well as the environment set up that should be completed before the Devbox is marked as \\'running\\'.',\n      properties: {\n        after_idle: {\n          $ref: '#/$defs/after_idle'\n        },\n        architecture: {\n          type: 'string',\n          description: 'The target architecture for the Devbox. If unset, defaults to arm64.',\n          enum: [            'x86_64',\n            'arm64'\n          ]\n        },\n        available_ports: {\n          type: 'array',\n          description: 'A list of ports to make available on the Devbox. Only ports made available will be surfaced to create tunnels via the \\'createTunnel\\' API.',\n          items: {\n            type: 'integer'\n          }\n        },\n        custom_cpu_cores: {\n          type: 'integer',\n          description: 'custom resource size, number of cpu cores, must be multiple of 2. Min is 1, max is 16.'\n        },\n        custom_disk_size: {\n          type: 'integer',\n          description: 'custom disk size, number in GiB, must be a multiple of 2. Min is 2GiB, max is 64GiB.'\n        },\n        custom_gb_memory: {\n          type: 'integer',\n          description: 'custom memory size, number in GiB, must be a multiple of 2. Min is 2GiB, max is 64GiB.'\n        },\n        keep_alive_time_seconds: {\n          type: 'integer',\n          description: 'Time in seconds after which Devbox will automatically shutdown. Default is 1 hour.'\n        },\n        launch_commands: {\n          type: 'array',\n          description: 'Set of commands to be run at launch time, before the entrypoint process is run.',\n          items: {\n            type: 'string'\n          }\n        },\n        required_services: {\n          type: 'array',\n          description: 'A list of ContainerizedService names to be started when a Devbox is created. A valid ContainerizedService must be specified in Blueprint to be started.',\n          items: {\n            type: 'string'\n          }\n        },\n        resource_size_request: {\n          type: 'string',\n          description: 'Manual resource configuration for Devbox. If not set, defaults will be used.',\n          enum: [            'X_SMALL',\n            'SMALL',\n            'MEDIUM',\n            'LARGE',\n            'X_LARGE',\n            'XX_LARGE',\n            'CUSTOM_SIZE'\n          ]\n        },\n        user_parameters: {\n          type: 'object',\n          description: 'Specify the user for execution on Devbox. If not set, default `user` will be used.',\n          properties: {\n            uid: {\n              type: 'integer',\n              description: 'User ID (UID) for the Linux user. Must be a positive integer.'\n            },\n            username: {\n              type: 'string',\n              description: 'Username for the Linux user.'\n            }\n          },\n          required: [            'uid',\n            'username'\n          ]\n        }\n      }\n    },\n    after_idle: {\n      type: 'object',\n      properties: {\n        idle_time_seconds: {\n          type: 'integer',\n          description: 'After idle_time_seconds, on_idle action will be taken.'\n        },\n        on_idle: {\n          type: 'string',\n          description: 'Action to take after Devbox becomes idle.',\n          enum: [            'shutdown',\n            'suspend'\n          ]\n        }\n      },\n      required: [        'idle_time_seconds',\n        'on_idle'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Runloop, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.devboxes.browsers.retrieve(id)));
};

export default { metadata, tool, handler };
