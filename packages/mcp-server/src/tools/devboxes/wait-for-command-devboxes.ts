// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@runloop/api-client-mcp/filtering';
import { Metadata, asTextContentResult } from '@runloop/api-client-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Runloop from '@runloop/api-client';

export const metadata: Metadata = {
  resource: 'devboxes',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/v1/devboxes/{devbox_id}/executions/{execution_id}/wait_for_status',
  operationId: 'waitForCommandCompletion',
};

export const tool: Tool = {
  name: 'wait_for_command_devboxes',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nPolls the asynchronous execution's status until it reaches one of the desired statuses or times out. Defaults to 60 seconds.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/devbox_async_execution_detail_view',\n  $defs: {\n    devbox_async_execution_detail_view: {\n      type: 'object',\n      properties: {\n        devbox_id: {\n          type: 'string',\n          description: 'Devbox id where command was executed.'\n        },\n        execution_id: {\n          type: 'string',\n          description: 'Ephemeral id of the execution in progress.'\n        },\n        status: {\n          type: 'string',\n          description: 'Current status of the execution.',\n          enum: [            'queued',\n            'running',\n            'completed'\n          ]\n        },\n        exit_status: {\n          type: 'integer',\n          description: 'Exit code of command execution. This field will remain unset until the execution has completed.'\n        },\n        shell_name: {\n          type: 'string',\n          description: 'Shell name.'\n        },\n        stderr: {\n          type: 'string',\n          description: 'Standard error generated by command. This field will remain unset until the execution has completed.'\n        },\n        stdout: {\n          type: 'string',\n          description: 'Standard out generated by command. This field will remain unset until the execution has completed.'\n        }\n      },\n      required: [        'devbox_id',\n        'execution_id',\n        'status'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      devbox_id: {
        type: 'string',
      },
      execution_id: {
        type: 'string',
      },
      statuses: {
        type: 'array',
        description:
          'The command execution statuses to wait for. At least one status must be provided. The command will be returned as soon as it reaches any of the provided statuses.',
        items: {
          type: 'string',
          enum: ['queued', 'running', 'completed'],
        },
      },
      timeout_seconds: {
        type: 'integer',
        description:
          '(Optional) Timeout in seconds to wait for the status, up to 60 seconds. Defaults to 60 seconds.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['devbox_id', 'execution_id', 'statuses'],
  },
  annotations: {},
};

export const handler = async (client: Runloop, args: Record<string, unknown> | undefined) => {
  const { devbox_id, execution_id, jq_filter, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(jq_filter, await client.devboxes.waitForCommand(devbox_id, execution_id, body)),
  );
};

export default { metadata, tool, handler };
