// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@runloop/api-client-mcp/filtering';
import { Metadata, asTextContentResult } from '@runloop/api-client-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Runloop from '@runloop/api-client';

export const metadata: Metadata = {
  resource: 'devboxes',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/v1/devboxes/{id}/execute_sync',
  operationId: 'execSyncCommand',
};

export const tool: Tool = {
  name: 'execute_sync_devboxes',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nExecute a bash command in the Devbox shell, await the command completion and return the output.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/devbox_execution_detail_view',\n  $defs: {\n    devbox_execution_detail_view: {\n      type: 'object',\n      properties: {\n        devbox_id: {\n          type: 'string',\n          description: 'Devbox id where command was executed.'\n        },\n        exit_status: {\n          type: 'integer',\n          description: 'Exit status of command execution.'\n        },\n        stderr: {\n          type: 'string',\n          description: 'Standard error generated by command.'\n        },\n        stdout: {\n          type: 'string',\n          description: 'Standard out generated by command.'\n        },\n        shell_name: {\n          type: 'string',\n          description: 'Shell name.'\n        }\n      },\n      required: [        'devbox_id',\n        'exit_status',\n        'stderr',\n        'stdout'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      command: {
        type: 'string',
        description:
          'The command to execute via the Devbox shell. By default, commands are run from the user home directory unless shell_name is specified. If shell_name is specified the command is run from the directory based on the recent state of the persistent shell.',
      },
      shell_name: {
        type: 'string',
        description:
          'The name of the persistent shell to create or use if already created. When using a persistent shell, the command will run from the directory at the end of the previous command and environment variables will be preserved.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id', 'command'],
  },
  annotations: {},
};

export const handler = async (client: Runloop, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.devboxes.executeSync(id, body)));
};

export default { metadata, tool, handler };
