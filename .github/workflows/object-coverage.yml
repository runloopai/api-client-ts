name: Object Smoke Test & Coverage Check

on:
  pull_request:
    paths:
      - 'src/objects/**'
      - 'tests/smoketests/object-oriented/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        type: choice
        default: dev
        options:
          - dev
          - prod

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Configure environment
        env:
          DEV_KEY: ${{ secrets.RUNLOOP_SMOKETEST_DEV_API_KEY }}
          PROD_KEY: ${{ secrets.RUNLOOP_SMOKETEST_PROD_API_KEY }}
        run: |
          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "RUNLOOP_API_KEY=${PROD_KEY}" >> $GITHUB_ENV
            echo "RUNLOOP_BASE_URL=https://api.runloop.ai" >> $GITHUB_ENV
          else
            echo "RUNLOOP_API_KEY=${DEV_KEY}" >> $GITHUB_ENV
            echo "RUNLOOP_BASE_URL=https://api.runloop.pro" >> $GITHUB_ENV
          fi
          echo "DEBUG=false" >> $GITHUB_ENV
          echo "RUN_SMOKETESTS=1" >> $GITHUB_ENV

      - name: Run smoke tests with coverage
        id: coverage
        run: yarn test:objects-coverage
        continue-on-error: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage-objects/
          retention-days: 30

      - name: Comment coverage on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let coverageExists = false;
            let coverageSummary = null;

            try {
              coverageSummary = JSON.parse(fs.readFileSync('coverage-objects/coverage-summary.json', 'utf8'));
              coverageExists = true;
            } catch (error) {
              console.log('Coverage summary not found:', error.message);
            }

            const testsPassed = '${{ steps.coverage.outcome }}' === 'success';

            let comment = '';

            if (!coverageExists) {
              comment = `## ❌ Object Coverage Report
              
              **Tests failed to run or coverage data was not generated.**
              
              Please check the workflow logs for details.`;
            } else {
              const total = coverageSummary.total;
              const functions = total.functions.pct;
              const lines = total.lines.pct;
              const branches = total.branches.pct;
              const statements = total.statements.pct;

              const coveragePassed = functions === 100;
              const allPassed = testsPassed && coveragePassed;
              const statusEmoji = allPassed ? '✅' : '❌';

              comment = `## ${statusEmoji} Object Smoke Tests & Coverage Report

              ### Test Results
              ${testsPassed ? '✅ All smoke tests passed' : '❌ Some smoke tests failed'}

              ### Coverage Results
              | Metric | Coverage | Required | Status |
              |--------|----------|----------|--------|
              | **Functions** | **${functions}%** | **100%** | ${coveragePassed ? '✅' : '❌'} |
              | Lines | ${lines}% | - | ℹ️ |
              | Branches | ${branches}% | - | ℹ️ |
              | Statements | ${statements}% | - | ℹ️ |

              **Coverage Requirement:** 100% function coverage (all public methods must be called in smoke tests)

              ${allPassed 
                ? '✅ All tests passed and all object methods are covered!' 
                : !testsPassed 
                  ? '❌ Some tests failed. Please fix the failing tests before checking coverage.'
                  : '❌ Some object methods are not covered in smoke tests. Please add tests that call all public methods.'}

              <details>
              <summary>View detailed coverage report</summary>

              Coverage reports are available in the workflow artifacts. Lines/branches/statements coverage is tracked but not required to be 100%.

              </details>`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check final status
        if: steps.coverage.outcome != 'success'
        run: |
          echo "❌ Tests failed or coverage threshold not met"
          exit 1
